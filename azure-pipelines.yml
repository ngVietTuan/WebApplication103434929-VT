trigger:
- main

pool:
  name: 'Default'

variables:
  buildConfiguration: 'Release'

stages:
  - stage: Build
    jobs:
      - job: Build
        pool:
          name: 'Default'
        steps:
        - checkout: self

        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '8.x'
            installationPath: $(Agent.ToolsDirectory)/dotnet

        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '**/*.sln'

        - task: VSBuild@1
          inputs:
            solution: '**/*.sln'
            msbuildArgs: '-property:Configuration=$(buildConfiguration)'
            platform: 'Any CPU'
            configuration: '$(buildConfiguration)'

        - task: VSTest@2
          inputs:
            platform: 'Any CPU'
            configuration: '$(buildConfiguration)'

        - powershell: |
            Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_win32.zip" -OutFile "$(Agent.ToolsDirectory)/chromedriver.zip"
            Expand-Archive -Path "$(Agent.ToolsDirectory)/chromedriver.zip" -DestinationPath "$(Agent.ToolsDirectory)" -Force
            Remove-Item -Path "$(Agent.ToolsDirectory)/chromedriver.zip" -Force
          displayName: 'Download and install ChromeDriver'

        - task: ArchiveFiles@2
          inputs:
            rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
            replaceExistingArchive: true

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'

  - stage: Deploy
    dependsOn: Build
    jobs:
      - job: Deploy
        pool:
          name: 'Default'
        steps:
        - download: current
          artifact: drop

        - powershell: |
            # Variables
            $ec2InstanceId = "i-0e990794ea9023a54"
            $region = "ap-southeast-2"
            $keyPath = "C:\\Users\\thait\\Downloads\\SWE40060.ppk"
            $user = "ec2-user"
            $artifactPath = "$(Pipeline.Workspace)\\drop\\*.zip"
            $remotePath = "/var/www/your-app"
            $puttyDownloadUrl = "https://the.earth.li/~sgtatham/putty/latest/w64/putty.zip"
            $puttyDirectory = "$(Agent.ToolsDirectory)\\putty"

            # Download and install PuTTY
            New-Item -ItemType Directory -Force -Path $puttyDirectory
            Invoke-WebRequest -Uri $puttyDownloadUrl -OutFile "$puttyDirectory\\putty.zip"
            Expand-Archive -Path "$puttyDirectory\\putty.zip" -DestinationPath $puttyDirectory -Force

            # Set paths for pscp and plink
            $pscpPath = "$puttyDirectory\\pscp.exe"
            $plinkPath = "$puttyDirectory\\plink.exe"

            # Extract the artifact
            Expand-Archive -Path $artifactPath -DestinationPath "$(Pipeline.Workspace)\\drop"

            # Copy files to EC2 instance
            $scpCommand = "& `"$pscpPath`" -i `"$keyPath`" -r `"$((Pipeline.Workspace)\\drop\\*)`" $user@$ec2InstanceId:$remotePath"
            Write-Host "Executing: $scpCommand"
            Invoke-Expression $scpCommand

            # Connect to EC2 instance and restart the application
            $sshCommand = "& `"$plinkPath`" -i `"$keyPath`" $user@$ec2InstanceId `"`"sudo systemctl restart your-app-service`"`""
            Write-Host "Executing: $sshCommand"
            Invoke-Expression $sshCommand
          displayName: 'Deploy to AWS EC2'
